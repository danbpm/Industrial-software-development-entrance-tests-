#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children no
\language russian
\language_package default
\inputencoding utf8
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement class
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style russian
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content true
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Задача 5
\end_layout

\begin_layout Subsection*
Условие:
 
\end_layout

\begin_layout Standard
Дан треугольник (в виде списка списков,
 где 
\begin_inset Formula $triangle[i]$
\end_inset

 —
 это строка с 
\begin_inset Formula $i+1$
\end_inset

 элементом).
 Найди минимальную сумму пути от вершины треугольника до его основания.
 На каждом шаге ты можешь переместиться на соседнее число в строке ниже.
 Если ты находишься на индексе 
\begin_inset Formula $i$
\end_inset

 в текущей строке,
 ты можешь перейти на индекс 
\begin_inset Formula $i$
\end_inset

 или индекс 
\begin_inset Formula $i+1$
\end_inset

 в следующей строке.
 Предложи решение с алгоритмической сложностью,
 не превышающей 
\begin_inset Formula $O(n^{2})$
\end_inset

.
\end_layout

\begin_layout Subsection*
Решение:
 
\end_layout

\begin_layout Standard
Условие можно переформулировать в постановке задачи динамического программирования.
\end_layout

\begin_layout Subsubsection*
Формализация состояний:
 
\end_layout

\begin_layout Standard
Пусть состояние 
\begin_inset Formula $(i,j)$
\end_inset

 обозначает ячейку в строке 
\begin_inset Formula $i$
\end_inset

 и столбце 
\begin_inset Formula $j$
\end_inset

,
 где 
\begin_inset Formula $i=0,1,2,n-1;$
\end_inset

 
\begin_inset Formula $j=0,1,...,i$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Функция Беллмана:
 
\end_layout

\begin_layout Standard
Пусть 
\begin_inset Formula $S(i,j)$
\end_inset

 – минимальная сумма пути от ячейки 
\begin_inset Formula $(i,j)$
\end_inset

 до любой ячейки основания.
 Тогда уравнение Беллмана имеет вид:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
S(i,j)=\begin{cases}
triangle[i][j] & ,\text{ если }i=n-1\text{(основание})\\
triangle[i][j]+\min\{S(i+1,j),S(i+1,j+1)\} & ,\text{ иначе}
\end{cases}.
\]

\end_inset

Минимальному расстоянию от вершины треугольника до основания будет соответствовать значение 
\begin_inset Formula $S(0,0)$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Алгоритм:
\end_layout

\begin_layout Standard
Алгоритм начинает проход по всем ячейкам треугольника для поиска минимального пути от каждой вершины до основания,
 начиная с предпоследней строки.
 Результаты записываются в исходный список,
 тем самым изменяя значение входного параметра функции,
 переданного по ссылке.
 По завершению работы внешнего цикла возвращается значение самого первого элемента списка,
 который представляет собой 
\begin_inset Formula $S(0,0)$
\end_inset

,
 что соответствует описанию алгоритма,
 приведенного выше.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement document
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def minimum_total(triangle:
 list[list[int]])->int:
 
\end_layout

\begin_layout Plain Layout

    rowsCount = len(triangle)
\end_layout

\begin_layout Plain Layout

    # идём снизу вверх по строкам,
 начиная с предпоследней строки 
\end_layout

\begin_layout Plain Layout

    for i in range(rowsCount - 2,
 -1,
 -1):
 
\end_layout

\begin_layout Plain Layout

        for j in range(len(triangle[i])):
 
\end_layout

\begin_layout Plain Layout

            # вычисляем значение функции Беллмана S(i,j)
\end_layout

\begin_layout Plain Layout

            triangle[i][j] += min(triangle[i+1][j],
 
\end_layout

\begin_layout Plain Layout

                                  triangle[i+1][j+1])
\end_layout

\begin_layout Plain Layout

    return triangle[0][0]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Листинг функции на языке Python 3
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Сложность:
\end_layout

\begin_layout Standard
Приведем оценку асимптотической сложности алгоритма в зависимости от размера входного списка 
\begin_inset Formula $n$
\end_inset

.
 Оценка асимптотической сложности фактически сводится к расчету количества всех итераций двойного цикла,
 поскольку время работы функции внутри цикла для всех итераций можно оценить некоторой положительной константой,
 а также добавление константных членов вне цикла не повлияет на асимптотическое поведение.
 Запишем количество итераций цикла:
\begin_inset Formula 
\[
\sum_{i=0}^{n-1}\sum_{j=0}^{i}1=\sum_{i=0}^{n-1}(i+1)=\frac{n\cdot(n+1)}{2}=\Theta(n^{2}),\text{ при }n\rightarrow\infty.
\]

\end_inset

Точная асимптотическая оценка данного алгоритма равна 
\begin_inset Formula $\Theta(n^{2}).$
\end_inset

 
\end_layout

\end_body
\end_document
